#!/bin/bash
# Script : EasyNginx
# Version: 3.4.1
# Authoer  : Ahmed Kandil .. continual with Ahmed Tohamy, Mahmoud Ahmed, Ahmed Kamel, Ahmed Fouad, Mahmoud Saad
# Last Update : 10-10-2013

# Set of Variables :

URL="./files"
# The link for Nginx init script
nginxst="$URL/nginxinit"
# The link for PHP-FPM init script
phpfpm="$URL/php-fpminit"
# The link for PHP-FPM conf file
phpfpm_conf="$URL/php-fpm.conf"
# The link for php.ini file
phpini="$URL/php.ini"
# The link for mod_rpaf
S_RPAF="$URL/mod_rpaf-0.6.tar.gz"
NGINX_PATH=/usr/local/nginx
FPM_PATH=/usr/local/php-fpm/etc
Apache_Port=82
BASE=/usr/share/EasyNginx
Advanced=0

# Template Files :
CONF_TEMPLATE_URL="$URL/ntemplate-basic.tar.gz"

# Start Colors :
DarkGrey="$(tput bold ; tput setaf 0)"
LightGrey="$(tput setaf 7)"
White="$(tput bold ; tput setaf 7)"
Red="$(tput setaf 1)"
LightRed="$(tput bold ; tput setaf 1)"
Green="$(tput setaf 2)"
LightGreen="$(tput bold ; tput setaf 2)"
Yellow="$(tput bold ; tput setaf 3)"
Blue="$(tput setaf 4)"
LightBlue="$(tput bold ; tput setaf 4)"
NC="$(tput sgr0)" # No Color
# End Color

InsertSection()
{
	echo ""
	echo "[+] ${Yellow}$1${NC}"
	echo "------------------------------------"
}

# Install the required repos
do_repo()
{
InsertSection "-- Checking and Installing the required repos --"
# Check for the release and version :
rel=`cat /etc/redhat-release | cut -d" " -f3 | cut -d"." -f1`
ver=`uname -a | cut -d" " -f12`
     if [ -e /etc/yum.repos.d/epel.repo ] && [ -e /etc/yum.repos.d/centalt.repo ]
        then
	  echo -e " - You Have the required repos\t\t\t         [ ${Green}Done${NC} ] "
	 else (
	    if [ $rel == "5" ]
	    then (
    	     if [ $ver == "x86_64" ]
             then (
		   		 rpm -Uvh http://mirror.de.leaseweb.net/epel/5/x86_64/epel-release-5-4.noarch.rpm
 			      )

	         else
	    		rpm -Uvh http://download.fedoraproject.org/pub/epel/5/i386/epel-release-5-4.noarch.rpm
	         fi
		     )
	    elif [ $rel == "6" ]
	    then (

		     if [ $ver == "x86_64" ]
 			 then (
		         rpm -Uvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
 			     )
	         else
				 rpm -Uvh https://dl.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm
	         fi
		     )
	    else
	  			InsertSection "this script only for RedHat and CentOS "
	 	fi
             )
	 fi

}

# This function for installing Nginx :
do_Nginx()
{

 do_repo
 InsertSection " -- Installing Nginx -- "
 yum install pcre-devel.x86_64 openssl.x86_64 openssl-devel.x86_64 -y #> | tee -a $LOGFILE
 #yum install google-perftools* -y
 yum install gcc* -y
 yum install pcre-devel* -y
 yum install bc -y
 yum install curl curl-devel.x86_64 -y

 cd /usr/local/src
# wget --no-check-certificate http://nginx.org/download/nginx-1.4.1.tar.gz
# tar zxvf nginx-1.4.1.tar.gz
# cd nginx-1.4.1
rm -rf nginx*

#install the latest version of nginx
latest_url=`curl http://wiki.nginx.org/Install |grep 'Stable.*' -A2 |grep -o 'http://.*nginx.*\.gz'`
latest_version=`curl http://wiki.nginx.org/Install |grep 'Stable.*' -A2 |grep -o 'http://.*nginx.*\.gz' |awk -F'/' '{print$5}' |sed 's/.tar.gz//g'`
wget --no-check-certificate $latest_url
tar xvfz ${latest_version}.tar.gz
cd ${latest_version}

 ./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_gzip_static_module --with-http_realip_module --with-http_ssl_module
 make
 make install

 wget --no-check-certificate $nginxst -O /etc/init.d/nginx
 chmod +x /etc/init.d/nginx

 chkconfig --add nginx
 chkconfig --level 345 nginx on

 echo -e " -- Nginx Installed\t\t\t [ ${Green}Done${NC} ] "

}

# This function for installing PHP-FPM :
do_phpfpm()
{
   InsertSection " -- Installing PHP -- "
#Backup php-fpm directory if exists before installing
if [ -d /usr/local/php-fpm/ ]
then
	mv /usr/local/php-fpm /usr/local/php-fpm.$(date +%F).$(date +%M) > /dev/null 2>&1
fi
#######################################

   yum install libxml2-devel bzip2-devel libjpeg-devel libX11-devel gd-devel libmcrypt-devel mysql-devel mhash-devel libevent-devel libtool-ltdl-devel curl-devel.x86_64 libc-client-devel.i386 libc-client-devel.i386 zlib-devel libpng-devel libxslt-devel -y
   yum install bzip2-devel.x86_64 -y
   yum install freetype-devel gmp-devel mhash-devel libcurl-devel
   cd /usr/local/src
#   wget --no-check-certificate http://www.php.net/get/php-5.3.23.tar.gz/from/us1.php.net/mirror
#   tar -xzvf php-5.3.23.tar.gz && cd php-5.3.23
rm -rf php*

#download the latest version of php
#php_package=`curl http://www.php.net/downloads.php#v5 |grep -i 'PHP 5\.3.*Old stable' -A9 |grep -o 'php-.*\.tar\.gz'`
#php_version=`curl http://www.php.net/downloads.php#v5 |grep -i 'PHP 5\.3.*Old stable' -A9 |grep -o 'php-.*\.tar\.gz' |sed 's/.tar.gz//g'`
#php_url=http://www.php.net/get/$php_package/from/us1.php.net/mirror
php_version=php-5.3.28
php_url=http://fr2.php.net/get/php-5.3.28.tar.gz/from/this/mirror
wget --no-check-certificate -O ${php_version}.tar.gz $php_url
tar xvfz ${php_version}.tar.gz && cd $php_version

./configure --prefix=/usr/local/php-fpm --with-mysql --with-gd --with-gettext --with-libdir=lib64 --with-iconv --enable-fpm --enable-mbstring --with-mysqli --with-mcrypt --with-openssl --with-pcre-dir --with-pcre-regex --enable-sockets --enable-wddx --with-pdo-mysql --enable-exif --enable-zip --enable-sysvshm --with-bz2 --with-pic --with-xmlrpc --enable-bcmath --enable-calendar --with-jpeg-dir --with-zlib --with-curl --with-config-file-scan-dir='/usr/local/php-fpm/lib/php.d' --with-freetype-dir --with-png-dir --with-xpm-dir --enable-gd-native-ttf --with-gmp --enable-ftp --enable-magic-quotes --enable-sysvsem --enable-sysvshm --enable-sysvmsg --with-kerberos --enable-shmop --with-libxml-dir --enable-xml --with-mcrypt

   make all
   make install
   wget --no-check-certificate $phpfpm_conf -O  /usr/local/php-fpm/etc/php-fpm.conf
   #cp /usr/local/php-fpm/etc/{php-fpm.conf.default,php-fpm.conf}
   #sed -i 's/;pid/pid/gi' /usr/local/php-fpm/etc/php-fpm.conf
   #sed -i 's/;error_log/error_log/gi' /usr/local/php-fpm/etc/php-fpm.conf
   echo "include=/usr/local/php-fpm/etc/conf.d/*.conf" >> /usr/local/php-fpm/etc/php-fpm.conf
   rm -rf /usr/share/EasyNginx
   mkdir /usr/share/EasyNginx
   cd ${BASE}
   wget --no-check-certificate -q $CONF_TEMPLATE_URL
   tar -xzf * >/dev/null 2>&1
   echo "include=/usr/local/php-fpm/etc/conf.d/*.conf" >> /usr/local/php-fpm/etc/php-fpm.conf
   if [ ! -e /usr/local/cpanel ] && [ ! -d $FPM_PATH/conf.d/  ]
   then
	 mkdir $FPM_PATH/conf.d
	 cp $BASE/nginx_template/default-fpm-site.tpl $FPM_PATH/conf.d/default-site.conf
   fi
   wget --no-check-certificate $phpini -O /usr/local/php-fpm/lib/php.ini
   wget --no-check-certificate $phpfpm -O /etc/init.d/php-fpm
   chmod +x /etc/init.d/php-fpm
   chkconfig --add php-fpm
   chkconfig --levels 235 php-fpm on
#convert php paths to php-fpm paths
#mv /usr/bin/php /usr/bin/php2
#mv /usr/local/bin/php /usr/local/bin/php2
#ln -s /usr/local/php-fpm/sbin/php-fpm /usr/local/bin/php
#ln -s /usr/local/php-fpm/sbin/php-fpm /usr/bin/php

   echo -e " -- PHP Installed\t\t\t [ ${Green}Done${NC} ] "
}

# Edit tweak settings
do_tweak()
{
if [ "$fpm" == "1" ]
	then
      chkconfig --levels 235 httpd off
elif [ "$fpm" == "0" ]
	then
      chkconfig --levels 235 httpd on
	  if [ -e /usr/local/cpanel ]
 	  then
		 replace ":80" ":$Apache_Port" -- /usr/local/apache/conf/httpd.conf > /dev/null 2>&1
     	 replace "apache_port=0.0.0.0:80" "apache_port=0.0.0.0:$Apache_Port" -- /var/cpanel/cpanel.config > /dev/null 2>&1
    	 echo -e " - Updated Apache Port on Tweak Setting  \t\t [ ${Green}Done${NC} ]"
    	 /usr/local/cpanel/bin/apache_conf_distiller --update > /dev/null 2>&1
       	 /scripts/rebuildhttpdconf > /dev/null 2>&1
         sleep 1
		 echo -e " - Apache Config Rebuild  \t\t\t         [ ${Green}Done${NC} ]"
	  else
         replace "80" "$Apache_Port" -- /etc/httpd/conf/httpd.conf > /dev/null 2>&1
	  fi
fi
}

# This function check the services
do_CheckServices()
{

echo -e " - Check for Nginx Configuration file\t\t\t [ ${Green}Done${NC} ]"
InsertSection "Starting the required Service"
if [ "$fpm" == "1" ]
 then
   	  /etc/init.d/httpd stop >/dev/null 2>&1
	  /etc/init.d/php-fpm stop >/dev/null 2>&1
	  /etc/init.d/php-fpm start
	  /etc/init.d/php-fpm restart
 	  /etc/init.d/nginx start
      /etc/init.d/nginx restart

elif [ "$fpm" == "0" ]
 then
      /etc/init.d/php-fpm stop > /dev/null 2>&1
     # /etc/init.d/httpd restart
	killall -9 httpd &>/dev/null
        /etc/init.d/httpd start
	  /etc/init.d/nginx start
	  /etc/init.d/nginx restart
fi
}

# This function for Installing MySQL :
do_mysql()
{
	InsertSection "-- Installing MySQL --"
   	yum install mysql mysql-server -y
  	chkconfig --levels 235 mysqld on
   	/etc/init.d/mysqld start
   	echo -e " -- MySQL is Installed\t\t\t\t [ ${Green}Done${NC} ]"
}

# This function for Installing Mod_RPAF
do_Rpaf()
{

InsertSection "Installing Apache Mod_RPAF"
#comm=`apachectl -t -D DUMP_MODULES |grep rpaf|cut -d" " -f2|wc -l`
if [ -e /usr/local/apache/modules/mod_rpaf-2.0.so ]
then
	echo "	- Apache Mod_Rpaf Installation	[ Already Installed ]"
	echo "	- Please Check Mod_Rpaf Configuration Manually"
else
	echo -e "	- Download mod_rpaf Sources\t\t\t\t [ ${Green}Done${NC} ]"
	wget --no-check-certificate -q $S_RPAF
	tar -zxf mod_rpaf-0.6.tar.gz > /dev/null 2>&1
	cd mod_rpaf-0.6
	make rpaf-2.0 && make install-2.0 > /dev/null 2>&1
	/usr/local/apache/bin/apxs -i -c -n mod_rpaf-2.0.so mod_rpaf-2.0.c > /dev/null 2>&1
	# fix mod_rpaf 'can't load module' 23Nov 2010
	if [ -e /usr/lib64/httpd/modules/mod_rpaf-2.0.so ]
	then
		cp /usr/lib64/httpd/modules/mod_rpaf-2.0.so /usr/local/apache/modules/
	fi
	echo -e " -- Apache Mod_Rpaf Installation\t\t\t\t [ ${Green}Done${NC} ]"
	echo "LoadModule rpaf_module modules/mod_rpaf-2.0.so" > /usr/local/apache/conf/includes/pre_main_global.conf
	echo "#Mod_rpaf settings" >> /usr/local/apache/conf/includes/pre_main_global.conf
	echo "RPAFenable On" >> /usr/local/apache/conf/includes/pre_main_global.conf
	echo -e " -- Apache Mod_Rpaf Configuration\t\t\t\t [ ${Green}Done${NC} ]"
	RPAF_IP_OK=`grep RPAFproxy_ips  /usr/local/apache/conf/includes/pre_main_global.conf|wc -l`
	if [ $RPAF_IP_OK = 0 ]
	then
		MAINIP=`hostname -i`
		echo "RPAFproxy_ips 127.0.0.1 $MAINIP" >> /usr/local/apache/conf/includes/pre_main_global.conf
		echo "RPAFsethostname On" >> /usr/local/apache/conf/includes/pre_main_global.conf
	elif [ $RPAF_IP_OK > 1 ]
	then
		echo "Error : Check Mod_Rpaf Configuration in : /usr/local/apache/conf/includes/pre_main_global.conf "
	else
		echo "Rpaf Configured check configuration if the X-Referrer didn't work for you"
	fi
fi

}

# This function for making Vhosts Configuration files
do_Config()
{

rm -rf /usr/share/EasyNginx/
mkdir -p /usr/share/EasyNginx/

# Calcultaing the memory size
RAM_SIZE=`free -m | grep Mem | awk '{print $2}'`
# Calcultaing the number of CPUs
CPU=`cat /proc/cpuinfo |grep -c '^processor'`
DCPU=`echo $CPU*2 |bc`
# To get 2/3 of RAM
RAM_use=`echo $RAM_SIZE*2/3 |bc`
# To get The pm.max.childern as it equal = 2/3 of RAM divided of 50
PAM_MAX=`echo $RAM_use/50 |bc`
cd ${BASE}
if [ $Advanced == "1" ]
then
        CONF_TEMPLATE_URL="$URL/ntemplate-Microcaching.tar.gz"
fi
wget --no-check-certificate -q $CONF_TEMPLATE_URL
tar -xzf * >/dev/null 2>&1
mv  $NGINX_PATH/conf/nginx.conf  $NGINX_PATH/conf/nginx.conf.default
cp -f $BASE/nginx_template/main.template $NGINX_PATH/conf/nginx.conf

IP=`hostname -i`
CPU=`cat /proc/cpuinfo |grep -c '^processor'`
replace REP_IP $IP -- $NGINX_PATH/conf/nginx.conf > /dev/null 2>&1
replace REP_CORES $CPU -- $NGINX_PATH/conf/nginx.conf > /dev/null 2>&1
#####################################################################################
#check for varnish
if [ -e /var/run/varnish.pid ]
then
        echo
        echo -e " ${Red}- Varnish cache is active${NC} \t\t\t\t [ ${Green}Done${NC} ]"
        backend_oldip=`grep "backend default" /etc/varnish/default.vcl -A3 |grep host`
        backend_oldport=`grep "backend default" /etc/varnish/default.vcl -A3 |grep port`

        backend_newip='.host = "127.0.0.1";'
        backend_newport='.port = "81";'

        REP_NGINXPORT='127.0.0.1:81'

        frontend_oldip=`grep DAEMON_OPTS /etc/sysconfig/varnish |grep -v "#" |awk '{print$2}'`
        frontend_newip=':80'

        replace "$backend_oldip" "$backend_newip" -- /etc/varnish/default.vcl &>/dev/null
        replace "$backend_oldport" "$backend_newport" -- /etc/varnish/default.vcl &>/dev/null
        replace "$frontend_oldip" "$frontend_newip" -- /etc/sysconfig/varnish &>/dev/null

        /etc/init.d/varnish stop
        /etc/init.d/nginx stop &>/dev/null
        /etc/init.d/httpd stop &>/dev/null
        /etc/init.d/varnish start
else
        REP_NGINXPORT=80
fi
####################################################################################

if [ ! -e /usr/local/cpanel ]
 then
	if [ ! -e /usr/local/nginx/vhosts ]
        then
                mkdir /usr/local/nginx/vhosts
        fi

	InsertSection "Generating NGINX Configuration files"
	echo -e " - Generate Nginx.conf file\t\t\t\t [ ${Green}Done${NC} ]"

	cp -R -f $BASE/nginx_template/maintenance /usr/local/nginx/html/
    chown -R apache.apache  /usr/local/nginx/html/maintenance

    if [ "$fpm" == "1" ]
      then
         VHOST_TEMPLATE=`cat $BASE/nginx_template/NocPanel-phpfpm.tpl`
cat > $NGINX_PATH/vhosts/default.conf << EOF
$VHOST_TEMPLATE
EOF

    elif [ "$fpm" == "0" ]
	  then
          VHOST_TEMPLATE=`cat $BASE/nginx_template/NocPanel-reverse.tpl`
cat > $NGINX_PATH/vhosts/default.conf << EOF
$VHOST_TEMPLATE
EOF
		IP=`hostname -i`
    	replace REP_IP $IP -- $NGINX_PATH/vhosts/default.conf > /dev/null 2>&1
        replace REP_Apache_Port $Apache_Port -- $NGINX_PATH/vhosts/default.conf > /dev/null 2>&1
	replace REP_NGINXPORT $REP_NGINXPORT -- $NGINX_PATH/vhosts/default.conf > /dev/null 2>&1
    fi

else

InsertSection "Generate NGINX Vhosts Configuration files"
echo -e " - Generate Nginx.conf file\t\t\t\t [ ${Green}Done${NC} ]"
   cd /var/cpanel/users
   fpmport=9000
   if [ ! -d $NGINX_PATH/vhosts/  ]
    then
		mkdir $NGINX_PATH/vhosts
   else
   		mv $NGINX_PATH/vhosts $NGINX_PATH/vhosts.$(date +%F).$(date +%M) > /dev/null 2>&1
   		mkdir $NGINX_PATH/vhosts > /dev/null 2>&1
   fi
for USER in *
   do
	for DOMAIN in `cat $USER | grep ^DNS | cut -d= -f2`
	   do

		    IP=`cat $USER|grep ^IP|cut -d= -f2`;
			ROOT_HOME=`grep ^$USER: /etc/passwd|cut -d: -f6`;
			IS_SUBDOM=`echo $DOMAIN|cut -d"." -f3`;
			SUBDOM=`echo $DOMAIN|cut -d"." -f1`;
			#if [ "$IS_SUBDOM" = "com" ] || [ "$IS_SUBDOM" = "net" ] || [ "$IS_SUBDOM" = "org" ]
			#then
				TXT="root   $ROOT_HOME/public_html/$SUBDOM; #$DOMAIN"
			    HOME="$ROOT_HOME/public_html/$SUBDOM"
			#else
			#	TXT="root   $ROOT_HOME/public_html; #$DOMAIN"
			#	HOME="$ROOT_HOME/public_html"
			#fi

			echo "[+] Converting $DOMAIN for $USER with $SUBDOM" >> /tmp/nginx_vh_list.tmp

			DOM_CONF=$NGINX_PATH/vhosts/$DOMAIN.conf
		  	DOM_FPM_CONF=$FPM_PATH/conf.d/$DOMAIN.conf

      		cp -R -f $BASE/nginx_template/maintenance $HOME/
	  		chown -R $USER.$USER $HOME/maintenance  > /dev/null 2>&1

			if [ "$fpm" == "1" ]
			then

		 		if [ ! -d $FPM_PATH/conf.d/  ]
			 	then
					mkdir $FPM_PATH/conf.d
				else
					cp -rf $FPM_PATH/conf.d $FPM_PATH/conf.d.$(date +%F).$(date +%M) #> /dev/null 2>&1
				fi

			VHOST_TEMPLATE=`cat $BASE/nginx_template/nginx-phpfpm.conf.tpl`
			FPM_SITE_TEMPLATE=`cat $BASE/nginx_template/fpm-site.tpl`


cat > $DOM_CONF << EOF
$VHOST_TEMPLATE
EOF
				replace REP_DOMAIN $DOMAIN -- $DOM_CONF > /dev/null 2>&1
				replace REP_TXT "$TXT" -- $DOM_CONF > /dev/null 2>&1
				replace REP_HOME "$HOME" -- $DOM_CONF > /dev/null 2>&1
				replace REP_FPMPORT "$fpmport" -- $DOM_CONF > /dev/null 2>&1
                replace REP_IP $IP -- $DOM_CONF > /dev/null 2>&1
				replace REP_NGINXPORT $REP_NGINXPORT -- $DOM_CONF > /dev/null 2>&1

cat > $DOM_FPM_CONF << EOF
$FPM_SITE_TEMPLATE
EOF
				replace REP_MAX $PAM_MAX -- $DOM_FPM_CONF > /dev/null 2>&1
				replace REP_CPU $CPU -- $DOM_FPM_CONF > /dev/null 2>&1
				replace REP_DCPU $DCPU -- $DOM_FPM_CONF > /dev/null 2>&1
				replace REP_DOMAIN $DOMAIN -- $DOM_FPM_CONF > /dev/null 2>&1
				replace REP_FPMPORT $fpmport -- $DOM_FPM_CONF > /dev/null 2>&1
			    replace REP_USER $USER 	-- $DOM_FPM_CONF > /dev/null >&1
				fpmport=`echo $[1 + $fpmport]`

			elif [ "$fpm" == "0" ]
			then
			VHOST_TEMPLATE=`cat $BASE/nginx_template/nginx-reverse.conf.tpl`
cat > $DOM_CONF << EOF
$VHOST_TEMPLATE
EOF
				replace REP_DOMAIN $DOMAIN -- $DOM_CONF > /dev/null 2>&1
				replace REP_Apache_Port $Apache_Port -- $DOM_CONF > /dev/null 2>&1
		        replace REP_IP $IP -- $DOM_CONF > /dev/null 2>&1
				replace REP_TXT "$TXT" -- $DOM_CONF > /dev/null 2>&1
				replace REP_NGINXPORT $REP_NGINXPORT -- $DOM_CONF > /dev/null 2>&1
			fi
	done
done


#Fix Domain ROOT_HOME Path
cd /var/cpanel/users
for USER in *
do
	for DOMAIN in `cat $USER | grep ^DNS= | cut -d= -f2`
	do
		SUBDOM=`echo $DOMAIN|cut -d"." -f1`;
		TXT="/$SUBDOM;"
		DOM_CONF=/usr/local/nginx/vhosts/$DOMAIN.conf
		replace $TXT REPLACE_VAR -- $DOM_CONF > /dev/null 2>&1
		replace "REPLACE_VAR" ";" -- $DOM_CONF > /dev/null 2>&1

	done
done

echo -e " - Nginx Virtual Hosts Configuration\t\t\t [ ${Green}Done${NC} ]"
vhostc=`ls /usr/local/nginx/vhosts/*.conf | wc -l`
echo -e " - Current Virtual hosts Configuration\t\t\t [ ${vhostc} Account include SubDomains ]"
echo -e " - Check /tmp/nginx_vh_list.tmp to View Full virtual host log"
fi
rm -rf /usr/share/EasyNginx/
}

# Make configuration files for new Added Domains/subdomains only
do_AddNew_Config()
{

rm -rf /usr/share/EasyNginx/
mkdir -p /usr/share/EasyNginx/
Vhosts_before=`ls $NGINX_PATH/vhosts/ |wc -l`
# Calcultaing the memory size
RAM_SIZE=`free -m | grep Mem | awk '{print $2}'`
# Calcultaing the number of CPUs
CPU=`cat /proc/cpuinfo |grep -c '^processor'`
DCPU=`echo $CPU*2 |bc`
# To get 2/3 of RAM
RAM_use=`echo $RAM_SIZE*2/3 |bc`
# To get The pm.max.childern as it equal = 2/3 of RAM divided of 50
PAM_MAX=`echo $RAM_use/50 |bc`
#####################################################################################
#check for varnish
if [ -e /var/run/varnish.pid ]
then
        echo
        echo -e " ${Red}- Varnish cache is active${NC} \t\t\t\t [ ${Green}Done${NC} ]"
        backend_oldip=`grep "backend default" /etc/varnish/default.vcl -A3 |grep host`
        backend_oldport=`grep "backend default" /etc/varnish/default.vcl -A3 |grep port`

        backend_newip='.host = "127.0.0.1";'
        backend_newport='.port = "81";'

        REP_NGINXPORT='127.0.0.1:81'

        frontend_oldip=`grep DAEMON_OPTS /etc/sysconfig/varnish |grep -v "#" |awk '{print$2}'`
        frontend_newip=':80'

        replace "$backend_oldip" "$backend_newip" -- /etc/varnish/default.vcl &>/dev/null
        replace "$backend_oldport" "$backend_newport" -- /etc/varnish/default.vcl &>/dev/null
        replace "$frontend_oldip" "$frontend_newip" -- /etc/sysconfig/varnish &>/dev/null

        /etc/init.d/varnish stop
        /etc/init.d/nginx stop &>/dev/null
        /etc/init.d/httpd stop &>/dev/null
        /etc/init.d/varnish start
else
        REP_NGINXPORT=80
fi

####################################################################################


cd ${BASE}
if [ $Advanced == "1" ]
then
        CONF_TEMPLATE_URL="$URL/ntemplate-Microcaching.tar.gz"
fi
wget --no-check-certificate -q $CONF_TEMPLATE_URL
tar -xzf * > /dev/null 2>&1
InsertSection "Generate New NGINX Vhosts Configuration files"

   cd /var/cpanel/users

   for USER in *
   do
	 for DOMAIN in `cat $USER | grep ^DNS | cut -d= -f2`
	 do

			IP=`cat $USER|grep ^IP|cut -d= -f2`;
			ROOT_HOME=`grep ^$USER: /etc/passwd|cut -d: -f6`;
			IS_SUBDOM=`echo $DOMAIN|cut -d"." -f3`;
			SUBDOM=`echo $DOMAIN|cut -d"." -f1`;
			#if [ "$IS_SUBDOM" = "com" ] || [ "$IS_SUBDOM" = "net" ] || [ "$IS_SUBDOM" = "org" ]
			#then
				TXT="root   $ROOT_HOME/public_html/$SUBDOM; #$DOMAIN"
			    HOME="$ROOT_HOME/public_html/$SUBDOM"
			#else
			#	TXT="root   $ROOT_HOME/public_html; #$DOMAIN"
			#	HOME="$ROOT_HOME/public_html"
			#fi

			echo "[+] Converting $DOMAIN for $USER with $SUBDOM" >> /tmp/nginx_vh_list.tmp

			DOM_CONF=$NGINX_PATH/vhosts/$DOMAIN.conf
		  	DOM_FPM_CONF=$FPM_PATH/conf.d/$DOMAIN.conf
		 	userid=`id $USER | awk '{print $1}' | cut -d= -f2 | cut -d"(" -f1`
  		 	fpmport=9$userid
			if [ "$fpm" == "1" ]
			then

		 	  if [ ! -e $DOM_CONF ]
		 	  then
				  VHOST_TEMPLATE=`cat $BASE/nginx_template/nginx-phpfpm.conf.tpl`
				  FPM_SITE_TEMPLATE=`cat $BASE/nginx_template/fpm-site.tpl`


cat > $DOM_CONF << EOF
$VHOST_TEMPLATE
EOF
				replace REP_DOMAIN $DOMAIN -- $DOM_CONF > /dev/null 2>&1
				replace REP_TXT "$TXT" -- $DOM_CONF > /dev/null 2>&1
				replace REP_HOME "$HOME" -- $DOM_CONF > /dev/null 2>&1
				replace REP_FPMPORT "$fpmport" -- $DOM_CONF > /dev/null 2>&1
                replace REP_IP $IP -- $DOM_CONF > /dev/null 2>&1
				replace REP_NGINXPORT $REP_NGINXPORT -- $DOM_CONF > /dev/null 2>&1
  			    echo -e " - Generating $DOMAIN Configuration file\t\t [ ${Green}Done${NC} ]"

		 	  fi

		 	  if [ ! -e $DOM_FPM_CONF ]
		 	  then
cat > $DOM_FPM_CONF << EOF
$FPM_SITE_TEMPLATE
EOF
				replace REP_MAX $PAM_MAX -- $DOM_FPM_CONF > /dev/null 2>&1
				replace REP_CPU $CPU -- $DOM_FPM_CONF > /dev/null 2>&1
				replace REP_DCPU $DCPU -- $DOM_FPM_CONF > /dev/null 2>&1
				replace REP_DOMAIN $DOMAIN -- $DOM_FPM_CONF > /dev/null 2>&1
				replace REP_FPMPORT $fpmport -- $DOM_FPM_CONF > /dev/null 2>&1
			    replace REP_USER $USER 	-- $DOM_FPM_CONF > /dev/null >&1
				fpmport=`echo $[1 + $fpmport]`
	    	  fi

			elif [ "$fpm" == "0" ]
			then
		 	  if [ ! -e $DOM_CONF ]
	          then

				VHOST_TEMPLATE=`cat $BASE/nginx_template/nginx-reverse.conf.tpl`
cat > $DOM_CONF << EOF
$VHOST_TEMPLATE
EOF
				replace REP_DOMAIN $DOMAIN -- $DOM_CONF > /dev/null 2>&1
				replace REP_Apache_Port $Apache_Port -- $DOM_CONF > /dev/null 2>&1
				#replace REMOTE_IP $REMOTEIP -- $DOM_CONF > /dev/null 2>&1
		        replace REP_IP $IP -- $DOM_CONF > /dev/null 2>&1
				replace REP_TXT "$TXT" -- $DOM_CONF > /dev/null 2>&1
				replace REP_NGINXPORT $REP_NGINXPORT -- $DOM_CONF > /dev/null 2>&1
	            echo -e " - Generating $DOMAIN Configuration file\t\t [ ${Green}Done${NC} ]"
		 	  fi

			fi

	done
done

Vhosts_After=`ls $NGINX_PATH/vhosts/ |wc -l`
echo -e " - Nginx Virtual Hosts Configuration Check\t\t [ ${Green}Done${NC} ]"
if [ $Vhosts_before == $Vhosts_After ]
then
	echo -e " - There is no new Domian Added\t\t\t\t [ ${Green}Done${NC} ]"
else
	New_Added=`echo $Vhosts_After-$Vhosts_before |bc`
	echo -e " - Adding $New_Added new Domian\t\t\t\t\t [ ${Green}Done${NC} ]"
fi

#Fix Domain ROOT_HOME Path
cd /var/cpanel/users
for USER in *
do
	for DOMAIN in `cat $USER | grep ^DNS= | cut -d= -f2`
	do
		SUBDOM=`echo $DOMAIN|cut -d"." -f1`;
		TXT="/$SUBDOM;"
		DOM_CONF=/usr/local/nginx/vhosts/$DOMAIN.conf
		replace $TXT REPLACE_VAR -- $DOM_CONF > /dev/null 2>&1
		replace "REPLACE_VAR" ";" -- $DOM_CONF > /dev/null 2>&1

	done
done

vhostc=`ls /usr/local/nginx/vhosts/*.conf | wc -l`
echo -e " - Current Virtual hosts Configuration\t\t\t [ ${vhostc} Account include SubDomains ]"
echo -e " - Check /tmp/nginx_vh_list.tmp to View Full virtual host log"
rm -rf /usr/share/EasyNginx/
}

# Configure Nginx as a reverse proxy for a remote server
do_RemoteConfig ()
{

rm -rf /usr/share/EasyNginx/
mkdir -p /usr/share/EasyNginx/

cd ${BASE}
wget --no-check-certificate -q $URL/ntemplate-rr.tar.gz
tar -xzf ntemplate-rr.tar.gz > /dev/null 2>&1

 mv  $NGINX_PATH/conf/nginx.conf  $NGINX_PATH/conf/nginx.conf.default
 cp -f $BASE/nginx_template/main.template $NGINX_PATH/conf/nginx.conf

 IP=`hostname -i`
 CPU=`cat /proc/cpuinfo |grep -c '^processor'`
 replace REP_IP $IP -- $NGINX_PATH/conf/nginx.conf > /dev/null 2>&1
 replace REP_CORES $CPU -- $NGINX_PATH/conf/nginx.conf > /dev/null 2>&1


InsertSection "Generate NGINX Vhosts Configuration files"
echo -e " - Generate Nginx.conf file\t\t\t\t [ ${Green}Done${NC} ]"
#stop varnish if running
if [ -e /var/run/varnish.pid ]
then
        /etc/init.d/varnish stop
fi

   cd /var/cpanel/users

if [ ! -d $NGINX_PATH/vhosts/  ]
   then
	mkdir $NGINX_PATH/vhosts
else
   	mv $NGINX_PATH/vhosts $NGINX_PATH/vhosts.$(date +%F).$(date +%M) > /dev/null 2>&1
   	mkdir $NGINX_PATH/vhosts > /dev/null 2>&1
fi

for USER in *
   do
	for DOMAIN in `cat $USER | grep ^DNS | cut -d= -f2`
	   do
			REP_NGINXPORT="80"
			ROOT_HOME=`grep ^$USER: /etc/passwd|cut -d: -f6`;
			IS_SUBDOM=`echo $DOMAIN|cut -d"." -f3`;
			SUBDOM=`echo $DOMAIN|cut -d"." -f1`;
			#if [ "$IS_SUBDOM" = "com" ] || [ "$IS_SUBDOM" = "net" ] || [ "$IS_SUBDOM" = "org" ]
			#then
				TXT="root   $ROOT_HOME/public_html/$SUBDOM; #$DOMAIN"
			    HOME="$ROOT_HOME/public_html/$SUBDOM"
			#else
			#	TXT="root   $ROOT_HOME/public_html; #$DOMAIN"
			#	HOME="$ROOT_HOME/public_html"
			#fi

			echo "[+] Converting $DOMAIN for $USER with $SUBDOM" >> /tmp/nginx_vh_list.tmp

			DOM_CONF=$NGINX_PATH/vhosts/$DOMAIN.conf

      		cp -R -f $BASE/nginx_template/maintenance $HOME/
	  		chown -R $USER.$USER $HOME/maintenance  > /dev/null 2>&1

			VHOST_TEMPLATE=`cat $BASE/nginx_template/nginx-reverse.conf.tpl`
cat > $DOM_CONF << EOF
$VHOST_TEMPLATE
EOF
				replace REP_DOMAIN $DOMAIN -- $DOM_CONF > /dev/null 2>&1
				replace REP_Apache_Port $Apache_Port -- $DOM_CONF > /dev/null 2>&1
				replace REP_IP $REMOTEIP -- $DOM_CONF > /dev/null 2>&1
		        #replace REP_IP $IP -- $DOM_CONF > /dev/null 2>&1
				replace REP_TXT "$TXT" -- $DOM_CONF > /dev/null 2>&1
				replace :82 :80 -- $DOM_CONF > /dev/null 2>&1
	done
done

#Fix Domain ROOT_HOME Path
cd /var/cpanel/users
for USER in *
do
	for DOMAIN in `cat $USER | grep ^DNS= | cut -d= -f2`
	do
		SUBDOM=`echo $DOMAIN|cut -d"." -f1`;
		TXT="/$SUBDOM;"
		DOM_CONF=/usr/local/nginx/vhosts/$DOMAIN.conf
		replace $TXT REPLACE_VAR -- $DOM_CONF > /dev/null 2>&1
		replace "REPLACE_VAR" ";" -- $DOM_CONF > /dev/null 2>&1

	done
done

echo -e " - Nginx Virtual Hosts Configuration\t\t\t [ ${Green}Done${NC} ]"
vhostc=`ls /usr/local/nginx/vhosts/*.conf | wc -l`
echo -e " - Current Virtual hosts Configuration\t\t\t [ ${vhostc} Account include SubDomains ]"
echo -e " - Check /tmp/nginx_vh_list.tmp to View Full virtual host log"
rm -rf /usr/share/EasyNginx/
}

do_LogRotate ()
{

if [ ! -e /usr/local/nginx  ]
  then

echo "NGINX NOT INSTALLED IN SERVER"

else

sed -i 's@weekly@daily@' /etc/logrotate.conf
sed -i 's@rotate 4@rotate 1@' /etc/logrotate.conf

echo "/usr/local/nginx/on {
    missingok
    notifempty
    sharedscripts
    maxage 2
    size 1k
    postrotate
	service nginx restart
    endscript
}



/usr/local/nginx/logs/* {
    missingok
    notifempty
    sharedscripts
    maxage 2
    size 1k
    postrotate
      service nginx restart
    endscript
}
" > /etc/logrotate.d/nginx
logrotate -v /etc/logrotate.conf /etc/logrotate.d/nginx > /dev/null 2>&1

fi

}

do_AddHooks ()
{

mkdir /usr/local/cpanel/hooks/subdomain > /dev/null 2>&1
mkdir /usr/local/cpanel/hooks/addondomain > /dev/null 2>&1
mkdir /usr/local/cpanel/hooks/park/ > /dev/null 2>&1

if [ $fpm == "1" ]
then
cat > /usr/local/cpanel/scripts/postwwwacctuser << EOF
#!/usr/bin/env python
import subprocess
subprocess.call("easynginx -fpm -nc", shell=True)
EOF

cat > /usr/local/cpanel/hooks/subdomain/addsubdomain << EOF
#!/usr/bin/env python
import subprocess
subprocess.call("easynginx -fpm -nc", shell=True)
EOF

cat > /usr/local/cpanel/hooks/addondomain/addaddondomain << EOF
#!/usr/bin/env python
import subprocess
subprocess.call("easynginx -fpm -nc", shell=True)
EOF

cat > /usr/local/cpanel/hooks/park/park << EOF
#!/usr/bin/env python
import subprocess
subprocess.call("easynginx -fpm -nc", shell=True)
EOF

elif [ $fpm == "0" ]
then
        if [ $Advanced == "1" ]
        then
cat > /usr/local/cpanel/scripts/postwwwacctuser << EOF
#!/usr/bin/env python
import subprocess
subprocess.call("easynginx -r -nc -s", shell=True)
EOF

cat > /usr/local/cpanel/hooks/subdomain/addsubdomain << EOF
#!/usr/bin/env python
import subprocess
subprocess.call("easynginx -r -nc -s", shell=True)
EOF

cat > /usr/local/cpanel/hooks/addondomain/addaddondomain << EOF
#!/usr/bin/env python
import subprocess
subprocess.call("easynginx -r -nc -s", shell=True)
EOF

cat > /usr/local/cpanel/hooks/park/park << EOF
#!/usr/bin/env python
import subprocess
subprocess.call("easynginx -r -nc -s", shell=True)
EOF

else
cat > /usr/local/cpanel/scripts/postwwwacctuser << EOF
#!/usr/bin/env python
import subprocess
subprocess.call("easynginx -r -nc", shell=True)
EOF

cat > /usr/local/cpanel/hooks/subdomain/addsubdomain << EOF
#!/usr/bin/env python
import subprocess
subprocess.call("easynginx -r -nc", shell=True)
EOF

cat > /usr/local/cpanel/hooks/addondomain/addaddondomain << EOF
#!/usr/bin/env python
import subprocess
subprocess.call("easynginx -r -nc", shell=True)
EOF

cat > /usr/local/cpanel/hooks/park/park << EOF
#!/usr/bin/env python
import subprocess
subprocess.call("easynginx -r -nc", shell=True)
EOF

fi
fi
cat > /scripts/before_apache_make << EOF
#!/usr/bin/env python
import subprocess
subprocess.call("easynginx -drpaf", shell=True)
EOF

cat > /scripts/after_apache_make_install << EOF
#!/usr/bin/env python
import subprocess
subprocess.call("easynginx -rpaf", shell=True)
EOF

cat > /scripts/postkillacct << EOF
#!/usr/bin/env python
import subprocess
subprocess.call("easynginx -rc", shell=True)
EOF

cat > /usr/local/cpanel/hooks/subdomain/delsubdomain << EOF
#!/usr/bin/env python
import subprocess
subprocess.call("easynginx -rc", shell=True)
EOF

cat > /usr/local/cpanel/hooks/addondomain/deladdondomain << EOF
#!/usr/bin/env python
import subprocess
subprocess.call("easynginx -rc", shell=True)
EOF

cat > /usr/local/cpanel/hooks/park/unpark << EOF
#!/usr/bin/env python
import subprocess
subprocess.call("easynginx -rc", shell=True)
EOF

chmod +x /scripts/postwwwacctuser
chmod +x /scripts/before_apache_make
chmod +x /scripts/after_apache_make_install
chmod +x /scripts/postkillacct
chmod +x /usr/local/cpanel/hooks/subdomain/addsubdomain
chmod +x /usr/local/cpanel/hooks/addondomain/addaddondomain
chmod +x /usr/local/cpanel/hooks/park/park
chmod +x /usr/local/cpanel/hooks/subdomain/delsubdomain
chmod +x /usr/local/cpanel/hooks/addondomain/deladdondomain
chmod +x /usr/local/cpanel/hooks/park/unpark

/usr/local/cpanel/bin/register_hooks > /dev/null 2>&1
}

do_DisableRPAF ()
{
replace "LoadModule" "#LoadModule" -- /usr/local/apache/conf/includes/pre_main_global.conf > /dev/null 2>&1
replace "Mod_rpaf" "#Mod_rpaf" -- /usr/local/apache/conf/includes/pre_main_global.conf > /dev/null 2>&1
replace "RPAF" "#RPAF" -- /usr/local/apache/conf/includes/pre_main_global.conf > /dev/null 2>&1
}

do_EnableRPAF ()
{
IP=`hostname -i`
replace "#LoadModule" "LoadModule" -- /usr/local/apache/conf/includes/pre_main_global.conf > /dev/null 2>&1
#replace "#Mod_rpaf" "Mod_rpaf" -- /usr/local/apache/conf/includes/pre_main_global.conf > /dev/null 2>&1
replace "#RPAF" "RPAF" -- /usr/local/apache/conf/includes/pre_main_global.conf > /dev/null 2>&1
replace "127.0.0.1" "127.0.0.1 $IP" -- /usr/local/apache/conf/includes/pre_main_global.conf > /dev/null 2>&1
/etc/init.d/httpd restart
/etc/init.d/httpd restart
}

do_RemoveVH ()
{
echo -e " - Generating the name(s) of deleted Account(s)\t\t [ ${Green}Done${NC} ]"
cd /usr/
cat /etc/userdomains | grep -v nobody |cut -d: -f1 | sort > Ndomains.txt
ls $NGINX_PATH/vhosts/ | sed 's/.conf//g' | sort > Nvhosts.txt
diff Ndomains.txt Nvhosts.txt | grep "> " | cut -d">" -f2 |cut -d" " -f2 > Rvhost

for i in `cat Rvhost`
do
rm $NGINX_PATH/vhosts/$i.conf
rm $FPM_PATH/conf.d/$i.conf > /dev/null 2>&1
echo -e " - Delete the configuration file for $i\t\t [ ${Green}Done${NC} ]"
done

rm -f Nvhosts.txt Ndomains.txt Rvhost > /dev/null 2>&1
cd ~
}

do_Help()
{

		echo " "
 		echo "${Red}[EasyNginx.sh v3.4.1-6]${NC}"
        echo "${Blue}Copyright (c) 2012, ArabHosters All rights reserved.${NC}"
        echo " "
        echo "${Blue}It Build LEMP (EngineX - Mysql - PHP) AND/OR Configuring VHosts${NC}"
	echo
        echo "Usage : $0 [options] "
	echo
                echo " ${Yellow}Options              Meaning:${NC}"
                echo " ${Yellow}-------              --------${NC}"
        echo " ${LightGreen}-fpm${NC}                 ${LightBlue}Installing Nginx + PHP-FPM and make Nginx stands alone${NC}"
                echo " ${LightGreen}-r${NC}                   ${LightBlue}Installing Nginx as a reverse proxy${NC}"
                echo " ${LightGreen}-rr${NC}                  ${LightBlue}Installing Nginx as a reverse proxy For a remote server${NC}"
                echo " ${LightGreen}-fpm -c${NC}              ${LightBlue}Making VHosts when Nginx is standing alone (without Installing Nginx)${NC}"
                echo " ${LightGreen}-r -c${NC}                ${LightBlue}Making VHosts when Nginx is reverse proxy  (without Installing Nginx)${NC}"
                echo " ${LightGreen}-fpm -nc${NC}             ${LightBlue}Adding VHosts for new domains when Nginx is standing alone${NC}"
                echo " ${LightGreen}-r -nc${NC}               ${LightBlue}Adding VHosts for new domains when Nginx is reverse proxy${NC}"
                echo " ${LightGreen}-rc${NC}                 ${LightBlue} Removing VHosts for Terminated Accounts${NC}"
                echo " ${LightGreen}-rpaf${NC}                ${LightBlue}Installing Rpaf module${NC}"
                echo " ${LightGreen}-drpaf${NC}               ${LightBlue}Disable Rpaf module${NC}"
                echo " ${LightGreen}-logr${NC}                ${LightBlue}If you have nginx and want to rotate logs${NC}"
        echo ""
                echo " ${Yellow}Advanced Options     Meaning:${NC}"
                echo " ${Yellow}----------------     --------${NC}"
                echo " ${LightGreen}-r -s${NC}                ${LightBlue}Installing Nginx as a reverse proxy${NC} ${Red}With Optimized Cache${NC}"
                echo " ${LightGreen}-r -c -s${NC}             ${LightBlue}Making VHosts when Nginx is reverse proxy${NC} ${Red}With Optimized Cache${NC} ${LightBlue}(without Installing Nginx)${NC}"
                echo " ${LightGreen}-r -nc -s${NC}            ${LightBlue}Adding VHosts for new domains when Nginx is reverse proxy${NC} ${Red}With Optimized Cache${NC}"
                echo ""
echo "${LightRed}[WARNNING]: It's Not Recommended To Use Advanced Options If You Use vbulletin Or Any Other Forums Scripts.${NC}"
echo ""
}


#####################
##		           ##
# The Main Function #
##		           ##
#####################

if [ $# != "0" ]
  then (

        if [ ! -e /usr/local/cpanel ] && [ ! -e /etc/init.d/mysqld ]
        then
		do_mysql
        fi

	    if [ $1 == "-fpm" ]
	    then
		    fpm="1"
	       	if [ $# == "2" ]
	       	then
		  	 if [ $2 == "-c" ]
		  	 then
			  	do_Config
			  	if [ -e /usr/local/cpanel ]
			  	then
			   		do_AddHooks
			  	fi
		      	do_CheckServices
	         elif [ $2 == "-nc" ]
		     then
				do_AddNew_Config
				do_CheckServices
		  	 else
				do_Help
 		  	 fi

		  	elif [ $# == "1" ]
		  	then
				do_Nginx
				do_phpfpm
				do_Config
  			 	if [ -e /usr/local/cpanel ]
			 	then
					do_AddHooks
			 	fi
				do_LogRotate
				do_tweak
				do_CheckServices

 	  		fi
elif [ $1 == "-r" ]
	then
		fpm="0"
		if [ $# == "3" ]
		then
			if [ $3 == "-s" ]
			then
				Advanced="1"
			else
				do_Help
			fi

			if [ $2 == "-c" ]
			then
				do_Rpaf
				do_Config
				if [ -e /usr/local/cpanel ]
				then
					do_AddHooks
				fi
				do_tweak
				do_CheckServices
			elif [ $2 == "-nc" ]
			then
				do_AddNew_Config
				do_CheckServices
			else
				do_Help
 			fi
	        elif [ $# == "2" ]
	        then
			if [ $2 == "-s" ]
			then
				Advanced=1
				do_Nginx
                        	do_Rpaf
                        	do_Config
                        	if [ -e /usr/local/cpanel ]
                        	then
                                	do_AddHooks
                        	fi
                        	do_LogRotate
                        	do_tweak
                        	do_CheckServices

			elif [ $2 == "-c" ]
	        	then
				do_Rpaf
				do_Config
				if [ -e /usr/local/cpanel ]
				then
					do_AddHooks
				fi
				do_tweak
		        	do_CheckServices
			elif [ $2 == "-nc" ]
			then
				do_AddNew_Config
				do_CheckServices
			else
				do_Help
 		 	fi

	       elif [ $# == "1" ]
	       then
			do_Nginx
			do_Rpaf
			do_Config
		    if [ -e /usr/local/cpanel ]
			then
				do_AddHooks
			fi
			do_LogRotate
			do_tweak
			do_CheckServices

 	       fi

	    elif [ $1 == "-drpaf" ]
	  	then
			do_DisableRPAF
	  	elif [ $1 == "-rpaf" ]
	  	then
			do_Rpaf
			do_EnableRPAF
			if [ -e /usr/local/nginx ]
			then
			fpm="0"
			do_CheckServices
			fi
	    elif [ $1 == "-logr" ]
	    then
			do_LogRotate
	    elif [ $1 == "-rc" ]
	    then
			do_RemoveVH
	    elif [ $1 == "-rr" ]
	    then
	     	if [ $# == "2" ]
	     	then
	         	REMOTEIP=$2
		 	 	fpm="0"
	     	 	if [ ! -e /usr/local/nginx ]
		 	 	then
		    	do_Nginx
		 	fi
		     do_RemoteConfig
		     do_tweak
		     do_CheckServices
	    else
		  echo "${Red}Error, you didn't enter the IP for the remote server${NC}"
		  echo ""
		  echo ""
		  do_Help
	    fi
     else
 		do_Help
     fi

      )
else
	do_Help
fi
