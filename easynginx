#!/bin/bash
# Script : easynginx
# Version: 3.4
# Coder  : Ahmed Kandil .. continual with Ahmed Tohamy, Mahmoud Ahmed, Ahmed Kamel
# Last Update : 11-08-2012


# Set of Variables :

URL=http://monitor.arabhosters.com/sources/nginx
# The link for Nginx init script
nginxst="$URL/nginxinit"
# The link for PHP-FPM init script
phpfpm="$URL/php-fpminit"
# The link for PHP-FPM conf file
phpfpm_conf="$URL/php-fpm.conf"
# The link for php.ini file
phpini="$URL/php.ini"
# The link for mod_rpaf
S_RPAF="$URL/mod_rpaf-0.6.tar.gz"
NGINX_PATH=/usr/local/nginx
FPM_PATH=/usr/local/php-fpm/etc
Apache_Port=82
BASE=/usr/local/src/EasyNginx

# Template Files
CONF_TEMPLATE_URL="$URL/ntemplate.tar.gz"


# Start Colors
DarkGrey="$(tput bold ; tput setaf 0)"
LightGrey="$(tput setaf 7)"
White="$(tput bold ; tput setaf 7)"
Red="$(tput setaf 1)"
LightRed="$(tput bold ; tput setaf 1)"
Green="$(tput setaf 2)"
LightGreen="$(tput bold ; tput setaf 2)"
Yellow="$(tput bold ; tput setaf 3)"
Blue="$(tput setaf 4)"
LightBlue="$(tput bold ; tput setaf 4)"
NC="$(tput sgr0)" # No Color
# End Color

InsertSection()
{
	echo ""
	echo "[+] ${Yellow}$1${NC}"
	echo "------------------------------------"
}

do_repo()
{
InsertSection "-- Checking and Installing the required repos --"
# Check for the release and version :
rel=`cat /etc/redhat-release | cut -d" " -f3 | cut -d"." -f1`
ver=`uname -a | cut -d" " -f12`
     if [ -e /etc/yum.repos.d/epel.repo ] && [ -e /etc/yum.repos.d/centalt.repo ]
        then 
	  echo -e " - You Have the required repos\t\t\t         [ ${Green}Done${NC} ] "
	else (  	
	  if [ $rel == "5" ]
	    then (
    	    if [ $ver == "x86_64" ]
                   then (
		   rpm -Uvh http://mirror.de.leaseweb.net/epel/5/x86_64/epel-release-5-4.noarch.rpm
                   rpm -Uvh http://centos.alt.ru/repository/centos/5/x86_64/centalt-release-5-3.noarch.rpm
 			)
 
	    else
	    rpm -Uvh http://download.fedoraproject.org/pub/epel/5/i386/epel-release-5-4.noarch.rpm	
  	    rpm -Uvh http://centos.alt.ru/repository/centos/5/i386/centalt-release-5-3.noarch.rpm
	    fi
		 )
	  elif [ $rel == "6" ]
	        then (

		if [ $ver == "x86_64" ]
 			then (
		        rpm -Uvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-5.noarch.rpm
			rpm -Uvh http://centos.alt.ru/repository/centos/6/x86_64/centalt-release-6-1.noarch.rpm  
 			     )
	        else
		rpm -Uvh http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-7.noarch.rpm
		rpm -Uvh http://centos.alt.ru/repository/centos/6/i386/centalt-release-6-1.noarch.rpm  
	        fi
		     )
	else
	  InsertSection "this script only for RedHat and CentOS "
	fi 
             )
	fi

}
# This function for installing Nginx :
do_Nginx()
{
 do_repo
 InsertSection " -- Installing Nginx -- "
 yum install pcre-devel.x86_64 openssl.x86_64 openssl-devel.x86_64 -y #> | tee -a $LOGFILE 
 #yum install google-perftools* -y
 yum install gcc* -y
 yum install pcre-devel* -y
 yum install bc -y

 cd /usr/local/
 wget http://nginx.org/download/nginx-1.2.8.tar.gz
 tar zxvf nginx-1.2.8.tar.gz
 cd nginx-1.2.8
 ./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_gzip_static_module --with-http_realip_module 
 make
 make install 

 wget $nginxst -O /etc/init.d/nginx
 chmod +x /etc/init.d/nginx
 
  chkconfig --add nginx
  chkconfig --level 345 nginx on

echo -e " -- Nginx Installed\t\t\t [ ${Green}Done${NC} ] "

}

# This function for installing PHP-FPM :
do_phpfpm()
{
   InsertSection " -- Installing PHP -- "

   yum install libxml2-devel bzip2-devel libjpeg-devel libX11-devel gd-devel libmcrypt-devel mysql-devel mhash-devel libevent-devel libtool-ltdl-devel curl-devel.x86_64 libc-client-devel.i386 libc-client-devel.i386 zlib-devel libpng-devel libxslt-devel -y
   yum install bzip2-devel.x86_64 -y
   yum install freetype-devel gmp-devel mhash-devel libcurl-devel
   cd /usr/local/src
   wget http://www.php.net/get/php-5.3.23.tar.gz/from/us1.php.net/mirror
   tar -xzvf php-5.3.23.tar.gz && cd php-5.3.23
   ./configure --prefix=/usr/local/php-fpm --with-mysql --with-gd --with-gettext --with-libdir=lib64 --with-iconv --enable-fpm --enable-mbstring --with-mysqli --with-openssl --with-pcre-dir --with-pcre-regex --enable-sockets --enable-wddx --with-pdo-mysql --enable-exif --enable-zip --enable-sysvshm --with-bz2 --with-pic --with-xmlrpc --enable-bcmath --enable-calendar --with-jpeg-dir --with-zlib --with-curl --with-config-file-scan-dir='/usr/local/php-fpm/lib/php.d' --with-freetype-dir --with-png-dir --with-xpm-dir --enable-gd-native-ttf --with-gmp --enable-ftp --enable-magic-quotes --enable-sysvsem --enable-sysvshm --enable-sysvmsg --with-kerberos --enable-shmop --with-libxml-dir --enable-xml --with-mhash
  
   make all
   make install
   wget $phpfpm_conf -O  /usr/local/php-fpm/etc/php-fpm.conf
   #cp /usr/local/php-fpm/etc/{php-fpm.conf.default,php-fpm.conf}
   #sed -i 's/;pid/pid/gi' /usr/local/php-fpm/etc/php-fpm.conf
   #sed -i 's/;error_log/error_log/gi' /usr/local/php-fpm/etc/php-fpm.conf  
   echo "include=/usr/local/php-fpm/etc/conf.d/*.conf" >> /usr/local/php-fpm/etc/php-fpm.conf
   if [ ! -e /usr/local/cpanel ] && [ ! -d $FPM_PATH/conf.d/  ]
    then
	mkdir $FPM_PATH/conf.d
	cp $BASE/nginx_template/default-fpm-site.tpl $FPM_PATH/conf.d/default-site.conf
   fi 
   wget $phpini -O /usr/local/php-fpm/lib/php.ini
   wget $phpfpm -O /etc/init.d/php-fpm 
   chmod +x /etc/init.d/php-fpm
   chkconfig --add php-fpm
   chkconfig --levels 235 php-fpm on
   rm -rf /usr/local/src/php-5.3.10
   echo -e " -- PHP Installed\t\t\t [ ${Green}Done${NC} ] "
}

# This function for Copying Nginx Configuration file and for check the services
do_CheckServices()
{

    echo -e " - Check for Nginx Configuration file\t\t\t [ ${Green}Done${NC} ]"
InsertSection "Starting the required Service"
    if [ "$fpm" == "1" ]
		then
    			chkconfig --levels 235 httpd off
   			 /etc/init.d/httpd stop 2>&1
		         /etc/init.d/php-fpm start
			 /etc/init.d/php-fpm restart
			 /etc/init.d/nginx start
			 /etc/init.d/nginx restart
	
    elif [ "$fpm" == "0" ]
		then
                     if [ -e /usr/local/cpanel ]
 		     then
			chkconfig --levels 235 httpd on
		 	replace ":80" ":$Apache_Port" -- /usr/local/apache/conf/httpd.conf > /dev/null 2>&1
     	         	replace "apache_port=0.0.0.0:80" "apache_port=0.0.0.0:$Apache_Port" -- /var/cpanel/cpanel.config > /dev/null 2>&1
    		 	echo -e " - Updated Apache Port on Tweak Setting  \t\t [ ${Green}Done${NC} ]"
       		 	/scripts/rebuildhttpdconf > /dev/null 2>&1
               	 	sleep 1
		 	echo -e " - Apache Config Rebuild  \t\t\t         [ ${Green}Done${NC} ]"
    	 		/etc/init.d/php-fpm stop > /dev/null 2>&1
			/etc/init.d/httpd restart
			/etc/init.d/httpd restart
			/etc/init.d/nginx start
		 	/etc/init.d/nginx restart
                     else
                        replace "80" "$Apache_Port" -- /etc/httpd/conf/httpd.conf > /dev/null 2>&1
			/etc/init.d/php-fpm stop > /dev/null 2>&1
			/etc/init.d/httpd restart
			/etc/init.d/httpd restart
			/etc/init.d/nginx start
		        /etc/init.d/nginx restart

	            fi
    fi

}

# This function for Installing MySQL :
do_mysql()
{
	InsertSection "-- Installing MySQL --"
   	yum install mysql mysql-server -y
  	chkconfig --levels 235 mysqld on
   	/etc/init.d/mysqld start
   	echo -e " -- MySQL is Installed\t\t\t\t [ ${Green}Done${NC} ]"
}

# This function for Installing Mod_RPAF
do_Rpaf()
{
InsertSection "Installing Apache Mod_RPAF"

#comm=`apachectl -t -D DUMP_MODULES |grep rpaf|cut -d" " -f2|wc -l`
if [ -e /usr/local/apache/modules/mod_rpaf-2.0.so ]
then
	echo "	- Apache Mod_Rpaf Installation	[ Already Installed ]"
	echo "		- Please Check Mod_Rpaf Configuration Manually"
else
	echo -e "	- Download mod_rpaf Sources\t\t\t\t [ ${Green}Done${NC} ]"
	wget -q $S_RPAF
	tar -zxf mod_rpaf-0.6.tar.gz > /dev/null 2>&1
	cd mod_rpaf-0.6
	make rpaf-2.0 && make install-2.0 > /dev/null 2>&1
	/usr/local/apache/bin/apxs -i -c -n mod_rpaf-2.0.so mod_rpaf-2.0.c > /dev/null 2>&1
	# fix mod_rpaf 'can't load module' 23Nov 2010
	if [ -e /usr/lib64/httpd/modules/mod_rpaf-2.0.so ]
	then
		cp /usr/lib64/httpd/modules/mod_rpaf-2.0.so /usr/local/apache/modules/
	fi
	echo -e " -- Apache Mod_Rpaf Installation\t\t\t\t [ ${Green}Done${NC} ]"
	echo "LoadModule rpaf_module modules/mod_rpaf-2.0.so" > /usr/local/apache/conf/includes/pre_main_global.conf
	echo "#Mod_rpaf settings" >> /usr/local/apache/conf/includes/pre_main_global.conf
	echo "RPAFenable On" >> /usr/local/apache/conf/includes/pre_main_global.conf
	echo -e " -- Apache Mod_Rpaf Configuration\t\t\t\t [ ${Green}Done${NC} ]"
	RPAF_IP_OK=`grep RPAFproxy_ips  /usr/local/apache/conf/includes/pre_main_global.conf|wc -l`
	if [ $RPAF_IP_OK = 0 ]
	then
		echo "RPAFproxy_ips 127.0.0.1 $MAINIP" >> /usr/local/apache/conf/includes/pre_main_global.conf
		echo "RPAFsethostname On" >> /usr/local/apache/conf/includes/pre_main_global.conf
	elif [ $RPAF_IP_OK > 1 ]
	then
		echo "Error : Check Mod_Rpaf Configuration in : /usr/local/apache/conf/includes/pre_main_global.conf "
	else
		echo "Rpaf Configured check configuration if the X-Referrer didn't work for you"
	fi
fi

}

# This function for Installing Vhosts Configuration files
do_Config()
{



rm -rf /usr/local/src/EasyNginx/
mkdir -p /usr/local/src/EasyNginx/

# Calcultaing the memory size
RAM_SIZE=`free -m | grep Mem | awk '{print $2}'`
# Calcultaing the number of CPUs
CPU=`cat /proc/cpuinfo |grep -c '^processor'`
DCPU=`echo $CPU*2 |bc`
# To get 2/3 of RAM
RAM_use=`echo $RAM_SIZE*2/3 |bc`
# To get The pm.max.childern as it equal = 2/3 of RAM divided of 50
PAM_MAX=`echo $RAM_use/50 |bc`

cd ${BASE}
wget -q $CONF_TEMPLATE_URL
tar -xzf ntemplate.tar.gz > /dev/null 2>&1

 mv  $NGINX_PATH/conf/nginx.conf  $NGINX_PATH/conf/nginx.conf.default
 cp -f $BASE/nginx_template/main.template $NGINX_PATH/conf/nginx.conf
       
 IP=`hostname -i`
 CPU=`cat /proc/cpuinfo |grep -c '^processor'`
 replace REP_IP $IP -- $NGINX_PATH/conf/nginx.conf > /dev/null 2>&1
 replace REP_CORES $CPU -- $NGINX_PATH/conf/nginx.conf > /dev/null 2>&1

 if [ ! -e /usr/local/cpanel ]
 then
InsertSection "Generating NGINX Configuration files"
echo -e " - Generate Nginx.conf file\t\t\t\t [ ${Green}Done${NC} ]"
 
  	
	cp -R -f $BASE/nginx_template/maintenance /usr/local/nginx/html/
        chown -R apache.apache  /usr/local/nginx/html/maintenance

       	if [ "$fpm" == "1" ]
         then
          VHOST_TEMPLATE=`cat $BASE/nginx_template/NocPanel-phpfpm.tpl`
cat > $NGINX_PATH/vhosts/default.conf << EOF
$VHOST_TEMPLATE
EOF
          
        elif [ "$fpm" == "0" ]
			then
          VHOST_TEMPLATE=`cat $BASE/nginx_template/NocPanel-reverse.tpl`
cat > $NGINX_PATH/vhosts/default.conf << EOF
$VHOST_TEMPLATE
EOF
	IP=`hostname -i`
    	replace REP_IP $IP -- $NGINX_PATH/vhosts/default.conf > /dev/null 2>&1
        replace REP_Apache_Port $Apache_Port -- $NGINX_PATH/vhosts/default.conf > /dev/null 2>&1
        fi
  
 else

InsertSection "Generate NGINX Vhosts Configuration files"
echo -e " - Generate Nginx.conf file\t\t\t\t [ ${Green}Done${NC} ]"
   cd /var/cpanel/users
   fpmport=9000
if [ ! -d $NGINX_PATH/vhosts/  ]
   then
	mkdir $NGINX_PATH/vhosts
else
   	mv $NGINX_PATH/vhosts $NGINX_PATH/vhosts.$(date +%F).$(date +%M) > /dev/null 2>&1
   	mkdir $NGINX_PATH/vhosts > /dev/null 2>&1
fi
for USER in *
   do
	for DOMAIN in `cat $USER | grep ^DNS | cut -d= -f2`
	   do

		IP=`cat $USER|grep ^IP|cut -d= -f2`;
			ROOT_HOME=`grep ^$USER: /etc/passwd|cut -d: -f6`;
			IS_SUBDOM=`echo $DOMAIN|cut -d"." -f3`;
			SUBDOM=`echo $DOMAIN|cut -d"." -f1`;
			if [ "$IS_SUBDOM" = "com" ] || [ "$IS_SUBDOM" = "net" ] || [ "$IS_SUBDOM" = "org" ]
			then
				TXT="root   $ROOT_HOME/public_html/$SUBDOM; #$DOMAIN"
			        HOME="$ROOT_HOME/public_html/$SUBDOM"
			else
				TXT="root   $ROOT_HOME/public_html; #$DOMAIN"
				HOME="$ROOT_HOME/public_html"
			fi

			echo "[+] Converting $DOMAIN for $USER with $SUBDOM" >> /tmp/nginx_vh_list.tmp


			DOM_CONF=$NGINX_PATH/vhosts/$DOMAIN.conf
		  	DOM_FPM_CONF=$FPM_PATH/conf.d/$DOMAIN.conf

      		  	cp -R -f $BASE/nginx_template/maintenance $HOME/
	  		chown -R $USER.$USER $HOME/maintenance  > /dev/null 2>&1

			if [ "$fpm" == "1" ]
			then

		 		if [ ! -d $FPM_PATH/conf.d/  ]
			 	then
					mkdir $FPM_PATH/conf.d
				fi

			VHOST_TEMPLATE=`cat $BASE/nginx_template/nginx-phpfpm.conf.tpl`
			FPM_SITE_TEMPLATE=`cat $BASE/nginx_template/fpm-site.tpl`


cat > $DOM_CONF << EOF
$VHOST_TEMPLATE
EOF
				replace REP_DOMAIN $DOMAIN -- $DOM_CONF > /dev/null 2>&1
				replace REP_TXT "$TXT" -- $DOM_CONF > /dev/null 2>&1
				replace REP_HOME "$HOME" -- $DOM_CONF > /dev/null 2>&1
				replace REP_FPMPORT "$fpmport" -- $DOM_CONF > /dev/null 2>&1
                                replace REP_IP $IP -- $DOM_CONF > /dev/null 2>&1


cat > $DOM_FPM_CONF << EOF
$FPM_SITE_TEMPLATE
EOF
				replace REP_MAX $PAM_MAX -- $DOM_FPM_CONF > /dev/null 2>&1
				replace REP_CPU $CPU -- $DOM_FPM_CONF > /dev/null 2>&1
				replace REP_DCPU $DCPU -- $DOM_FPM_CONF > /dev/null 2>&1
				replace REP_DOMAIN $DOMAIN -- $DOM_FPM_CONF > /dev/null 2>&1
				replace REP_FPMPORT $fpmport -- $DOM_FPM_CONF > /dev/null 2>&1
			        replace REP_USER $USER 	-- $DOM_FPM_CONF > /dev/null >&1	                
				fpmport=`echo $[1 + $fpmport]`	

			elif [ "$fpm" == "0" ]
			then
			VHOST_TEMPLATE=`cat $BASE/nginx_template/nginx-reverse.conf.tpl`
cat > $DOM_CONF << EOF
$VHOST_TEMPLATE
EOF
				replace REP_DOMAIN $DOMAIN -- $DOM_CONF > /dev/null 2>&1
				replace REP_Apache_Port $Apache_Port -- $DOM_CONF > /dev/null 2>&1
				#replace REMOTE_IP $REMOTEIP -- $DOM_CONF > /dev/null 2>&1
		                replace REP_IP $IP -- $DOM_CONF > /dev/null 2>&1
				replace REP_TXT "$TXT" -- $DOM_CONF > /dev/null 2>&1

			fi
		
	done
done


#Fix Domain ROOT_HOME Path
cd /var/cpanel/users
for USER in *
do
	for DOMAIN in `cat $USER | grep ^DNS= | cut -d= -f2`
	do
		SUBDOM=`echo $DOMAIN|cut -d"." -f1`;
		TXT="/$SUBDOM;"
		DOM_CONF=/usr/local/nginx/vhosts/$DOMAIN.conf
		replace $TXT REPLACE_VAR -- $DOM_CONF > /dev/null 2>&1
		replace "REPLACE_VAR" ";" -- $DOM_CONF > /dev/null 2>&1 
       
	done
done


echo -e " - Nginx Virtual Hosts Configuration\t\t\t [ ${Green}Done${NC} ]"
vhostc=`ls /usr/local/nginx/vhosts/*.conf | wc -l`
echo -e " - Current Virtual hosts Configuration\t\t\t [ ${vhostc} Account include SubDomains ]"
echo -e " - Check /tmp/nginx_vh_list.tmp to View Full virtual host log"
 fi 
}

do_AddNew_Config()
{


rm -rf /usr/local/src/EasyNginx/
mkdir -p /usr/local/src/EasyNginx/
Vhosts_before=`ls $NGINX_PATH/vhosts/ |wc -l`
# Calcultaing the memory size
RAM_SIZE=`free -m | grep Mem | awk '{print $2}'`
# Calcultaing the number of CPUs
CPU=`cat /proc/cpuinfo |grep -c '^processor'`
DCPU=`echo $CPU*2 |bc`
# To get 2/3 of RAM
RAM_use=`echo $RAM_SIZE*2/3 |bc`
# To get The pm.max.childern as it equal = 2/3 of RAM divided of 50
PAM_MAX=`echo $RAM_use/50 |bc`

cd ${BASE}
wget -q $CONF_TEMPLATE_URL
tar -xzf ntemplate.tar.gz > /dev/null 2>&1

InsertSection "Generate New NGINX Vhosts Configuration files"

   cd /var/cpanel/users

   for USER in *
   do
	for DOMAIN in `cat $USER | grep ^DNS | cut -d= -f2`
	do

		IP=`cat $USER|grep ^IP|cut -d= -f2`;
			ROOT_HOME=`grep ^$USER: /etc/passwd|cut -d: -f6`;
			IS_SUBDOM=`echo $DOMAIN|cut -d"." -f3`;
			SUBDOM=`echo $DOMAIN|cut -d"." -f1`;
			if [ "$IS_SUBDOM" = "com" ] || [ "$IS_SUBDOM" = "net" ] || [ "$IS_SUBDOM" = "org" ]
			then
				TXT="root   $ROOT_HOME/public_html/$SUBDOM; #$DOMAIN"
			        HOME="$ROOT_HOME/public_html/$SUBDOM"
			else
				TXT="root   $ROOT_HOME/public_html; #$DOMAIN"
				HOME="$ROOT_HOME/public_html"
			fi

			echo "[+] Converting $DOMAIN for $USER with $SUBDOM" >> /tmp/nginx_vh_list.tmp

			DOM_CONF=$NGINX_PATH/vhosts/$DOMAIN.conf
		  	DOM_FPM_CONF=$FPM_PATH/conf.d/$DOMAIN.conf
		 	userid=`id $USER | awk '{print $1}' | cut -d= -f2 | cut -d"(" -f1`
  		 	fpmport=9$userid 
			if [ "$fpm" == "1" ]
			then

		 	    if [ ! -e $DOM_CONF ] 
				then
			VHOST_TEMPLATE=`cat $BASE/nginx_template/nginx-phpfpm.conf.tpl`
			FPM_SITE_TEMPLATE=`cat $BASE/nginx_template/fpm-site.tpl`


cat > $DOM_CONF << EOF
$VHOST_TEMPLATE
EOF
				replace REP_DOMAIN $DOMAIN -- $DOM_CONF > /dev/null 2>&1
				replace REP_TXT "$TXT" -- $DOM_CONF > /dev/null 2>&1
				replace REP_HOME "$HOME" -- $DOM_CONF > /dev/null 2>&1
				replace REP_FPMPORT "$fpmport" -- $DOM_CONF > /dev/null 2>&1
                                replace REP_IP $IP -- $DOM_CONF > /dev/null 2>&1
  			echo -e " - Generating $DOMAIN Configuration file\t\t [ ${Green}Done${NC} ]"

			    fi

			    if [ ! -e $DOM_FPM_CONF ] 
				then
cat > $DOM_FPM_CONF << EOF
$FPM_SITE_TEMPLATE
EOF
				replace REP_MAX $PAM_MAX -- $DOM_FPM_CONF > /dev/null 2>&1
				replace REP_CPU $CPU -- $DOM_FPM_CONF > /dev/null 2>&1
				replace REP_DCPU $DCPU -- $DOM_FPM_CONF > /dev/null 2>&1
				replace REP_DOMAIN $DOMAIN -- $DOM_FPM_CONF > /dev/null 2>&1
				replace REP_FPMPORT $fpmport -- $DOM_FPM_CONF > /dev/null 2>&1
			        replace REP_USER $USER 	-- $DOM_FPM_CONF > /dev/null >&1	                
				fpmport=`echo $[1 + $fpmport]`
			    fi	

			elif [ "$fpm" == "0" ]
			then
			   if [ ! -e $DOM_CONF ] 
			     then
			
			VHOST_TEMPLATE=`cat $BASE/nginx_template/nginx-reverse.conf.tpl`
cat > $DOM_CONF << EOF
$VHOST_TEMPLATE
EOF
				replace REP_DOMAIN $DOMAIN -- $DOM_CONF > /dev/null 2>&1
				replace REP_Apache_Port $Apache_Port -- $DOM_CONF > /dev/null 2>&1
				#replace REMOTE_IP $REMOTEIP -- $DOM_CONF > /dev/null 2>&1
		                replace REP_IP $IP -- $DOM_CONF > /dev/null 2>&1
				replace REP_TXT "$TXT" -- $DOM_CONF > /dev/null 2>&1
	                     echo -e " - Generating $DOMAIN Configuration file\t\t [ ${Green}Done${NC} ]"
			   fi

			fi
		
	done
done

Vhosts_After=`ls $NGINX_PATH/vhosts/ |wc -l`
echo -e " - Nginx Virtual Hosts Configuration Check\t\t [ ${Green}Done${NC} ]"
  if [ $Vhosts_before == $Vhosts_After ]
     then
	echo -e " - There is no new Domian Added\t\t\t\t [ ${Green}Done${NC} ]"
  else
	New_Added=`echo $Vhosts_After-$Vhosts_before |bc`
	echo -e " - Adding $New_Added new Domian\t\t\t\t\t [ ${Green}Done${NC} ]"
  fi

#Fix Domain ROOT_HOME Path
cd /var/cpanel/users
for USER in *
do
	for DOMAIN in `cat $USER | grep ^DNS= | cut -d= -f2`
	do
		SUBDOM=`echo $DOMAIN|cut -d"." -f1`;
		TXT="/$SUBDOM;"
		DOM_CONF=/usr/local/nginx/vhosts/$DOMAIN.conf
		replace $TXT REPLACE_VAR -- $DOM_CONF > /dev/null 2>&1
		replace "REPLACE_VAR" ";" -- $DOM_CONF > /dev/null 2>&1 
       
	done
done


vhostc=`ls /usr/local/nginx/vhosts/*.conf | wc -l`
echo -e " - Current Virtual hosts Configuration\t\t\t [ ${vhostc} Account include SubDomains ]"
echo -e " - Check /tmp/nginx_vh_list.tmp to View Full virtual host log"

}

do_RemoteConfig ()
{

rm -rf /usr/local/src/EasyNginx/
mkdir -p /usr/local/src/EasyNginx/


cd ${BASE}
wget -q $CONF_TEMPLATE_URL
tar -xzf ntemplate.tar.gz > /dev/null 2>&1

 mv  $NGINX_PATH/conf/nginx.conf  $NGINX_PATH/conf/nginx.conf.default
 cp -f $BASE/nginx_template/main.template $NGINX_PATH/conf/nginx.conf
       
 IP=`hostname -i`
 CPU=`cat /proc/cpuinfo |grep -c '^processor'`
 replace REP_IP $IP -- $NGINX_PATH/conf/nginx.conf > /dev/null 2>&1
 replace REP_CORES $CPU -- $NGINX_PATH/conf/nginx.conf > /dev/null 2>&1


InsertSection "Generate NGINX Vhosts Configuration files"
echo -e " - Generate Nginx.conf file\t\t\t\t [ ${Green}Done${NC} ]"
   cd /var/cpanel/users

if [ ! -d $NGINX_PATH/vhosts/  ]
   then
	mkdir $NGINX_PATH/vhosts
else
   	mv $NGINX_PATH/vhosts $NGINX_PATH/vhosts.$(date +%F).$(date +%M) > /dev/null 2>&1
   	mkdir $NGINX_PATH/vhosts > /dev/null 2>&1
fi

for USER in *
   do
	for DOMAIN in `cat $USER | grep ^DNS | cut -d= -f2`
	   do

			ROOT_HOME=`grep ^$USER: /etc/passwd|cut -d: -f6`;
			IS_SUBDOM=`echo $DOMAIN|cut -d"." -f3`;
			SUBDOM=`echo $DOMAIN|cut -d"." -f1`;
			if [ "$IS_SUBDOM" = "com" ] || [ "$IS_SUBDOM" = "net" ] || [ "$IS_SUBDOM" = "org" ]
			then
				TXT="root   $ROOT_HOME/public_html/$SUBDOM; #$DOMAIN"
			        HOME="$ROOT_HOME/public_html/$SUBDOM"
			else
				TXT="root   $ROOT_HOME/public_html; #$DOMAIN"
				HOME="$ROOT_HOME/public_html"
			fi

			echo "[+] Converting $DOMAIN for $USER with $SUBDOM" >> /tmp/nginx_vh_list.tmp

			DOM_CONF=$NGINX_PATH/vhosts/$DOMAIN.conf

      		  	cp -R -f $BASE/nginx_template/maintenance $HOME/
	  		chown -R $USER.$USER $HOME/maintenance  > /dev/null 2>&1

			
			VHOST_TEMPLATE=`cat $BASE/nginx_template/nginx-reverse.conf.tpl`
cat > $DOM_CONF << EOF
$VHOST_TEMPLATE
EOF
				replace REP_DOMAIN $DOMAIN -- $DOM_CONF > /dev/null 2>&1
				replace REP_Apache_Port $Apache_Port -- $DOM_CONF > /dev/null 2>&1
				replace REP_IP $REMOTEIP -- $DOM_CONF > /dev/null 2>&1
		                #replace REP_IP $IP -- $DOM_CONF > /dev/null 2>&1
				replace REP_TXT "$TXT" -- $DOM_CONF > /dev/null 2>&1
				replace :82 :80 -- $DOM_CONF > /dev/null 2>&1

	done
done


#Fix Domain ROOT_HOME Path
cd /var/cpanel/users
for USER in *
do
	for DOMAIN in `cat $USER | grep ^DNS= | cut -d= -f2`
	do
		SUBDOM=`echo $DOMAIN|cut -d"." -f1`;
		TXT="/$SUBDOM;"
		DOM_CONF=/usr/local/nginx/vhosts/$DOMAIN.conf
		replace $TXT REPLACE_VAR -- $DOM_CONF > /dev/null 2>&1
		replace "REPLACE_VAR" ";" -- $DOM_CONF > /dev/null 2>&1 
       
	done
done


echo -e " - Nginx Virtual Hosts Configuration\t\t\t [ ${Green}Done${NC} ]"
vhostc=`ls /usr/local/nginx/vhosts/*.conf | wc -l`
echo -e " - Current Virtual hosts Configuration\t\t\t [ ${vhostc} Account include SubDomains ]"
echo -e " - Check /tmp/nginx_vh_list.tmp to View Full virtual host log"


}

do_LogRotate ()
{
if [ ! -e /usr/local/nginx  ]
  then

echo "NGINX NOT INSTALLED IN SERVER"
        
else

sed -i 's@weekly@daily@' /etc/logrotate.conf
sed -i 's@rotate 4@rotate 1@' /etc/logrotate.conf

echo "/usr/local/nginx/on {
    missingok
    notifempty
    sharedscripts
    maxage 2
    size 1k
    postrotate
	service nginx restart
    endscript
}



/usr/local/nginx/logs/* {
    missingok
    notifempty
    sharedscripts
    maxage 2
    size 1k
    postrotate
      service nginx restart
    endscript
}
" >/etc/logrotate.d/nginx
logrotate -v /etc/logrotate.conf /etc/logrotate.d/nginx

fi 
}

do_AddHooks ()
{
if [ $fpm="1" ]
then
cat > /usr/local/cpanel/scripts/postwwwacctuser << EOF
#!/usr/bin/env python
import subprocess
subprocess.call("easynginx -fpm -nc", shell=True)
EOF

elif [ $fpm="0" ]
then

cat > /usr/local/cpanel/scripts/postwwwacctuser << EOF
#!/usr/bin/env python
import subprocess
subprocess.call("easynginx -r -nc", shell=True)
EOF

fi

cat > /scripts/before_apache_make << EOF
#!/usr/bin/env python
import subprocess
subprocess.call("easynginx -drpaf", shell=True)
EOF

cat > /scripts/after_apache_make_install << EOF
#!/usr/bin/env python
import subprocess
subprocess.call("easynginx -rpaf", shell=True)
EOF

cat > /scripts/postkillacct << EOF
#!/usr/bin/env python
import subprocess
subprocess.call("easynginx -rc", shell=True)
EOF

chmod +x /scripts/postwwwacctuser
chmod +x /scripts/before_apache_make
chmod +x /scripts/after_apache_make_install
chmod +x /scripts/postkillacct
}

do_DisableRPAF ()
{
replace "LoadModule" "#LoadModule" -- /usr/local/apache/conf/includes/pre_main_global.conf > /dev/null 2>&1
replace "Mod_rpaf" "#Mod_rpaf" -- /usr/local/apache/conf/includes/pre_main_global.conf > /dev/null 2>&1
replace "RPAF" "#RPAF" -- /usr/local/apache/conf/includes/pre_main_global.conf > /dev/null 2>&1
}

do_EnableRPAF ()
{
replace "#LoadModule" "LoadModule" -- /usr/local/apache/conf/includes/pre_main_global.conf > /dev/null 2>&1
#replace "#Mod_rpaf" "Mod_rpaf" -- /usr/local/apache/conf/includes/pre_main_global.conf > /dev/null 2>&1
#replace "#Mod_rpaf" "Mod_rpaf" -- /usr/local/apache/conf/includes/pre_main_global.conf > /dev/null 2>&1
replace "#RPAF" "RPAF" -- /usr/local/apache/conf/includes/pre_main_global.conf > /dev/null 2>&1
/etc/init.d/httpd restart
/etc/init.d/httpd restart
}

do_RemoveVH ()
{
cat /etc/userdomains | grep -v nobody |cut -d: -f1 | sort > Ndomains.txt
ls $NGINX_PATH/vhosts/ | sed 's/.conf//g' | sort > Nvhosts.txt
diff Ndomains.txt Nvhosts.txt | grep "> " | cut -d">" -f2 |cut -d" " -f2 > Rvhost
for i in `cat Rvhost`
do
rm $NGINX_PATH/vhosts/$i.conf
rm $FPM_PATH/conf.d/$i.conf > /dev/null 2>&1
done
}

do_Help()
{
		echo "        ####################### "
 		echo "        ##		     ## "
 		echo "        # ${Red}[EasyNginx.sh v3.0]${NC} # "
 		echo "        ##		     ## "
 		echo "        ####################### "
                echo "${Blue}This Script was developed by ArabHosters${NC}"
                echo "${Blue}It Build LEMP (EngineX - Mysql - PHP) AND/OR Configuring VHosts${NC}"
                echo "Usage : $0 -[fpm|r] [-fpm -c | -r -c] "
 		echo " ${Yellow}Option            Meaning:${NC}"
		echo " ${Yellow}------            --------${NC}"
                echo " ${LightGreen}-fpm${NC}		   ${LightBlue}Installing Nginx + PHP-FPM and make Nginx stands alone${NC}"
		echo " ${LightGreen}-r${NC}		   ${LightBlue}Installing Nginx as a reverse proxy${NC}"
		echo " ${LightGreen}-rr${NC}	           ${LightBlue}Installing Nginx as a reverse proxy For a remote server${NC}"
		echo " ${LightGreen}-fpm -c${NC}           ${LightBlue}Making VHosts when Nginx is standing alone (without Installing Nginx)${NC}"
		echo " ${LightGreen}-r -c${NC}		   ${LightBlue}Making VHosts when Nginx is reverse proxy  (without Installing Nginx)${NC}"
		echo " ${LightGreen}-fpm -nc${NC}	   ${LightBlue}Adding VHosts for new domains when Nginx is standing alone${NC}"
		echo " ${LightGreen}-r -nc${NC}	           ${LightBlue}Adding VHosts for new domains when Nginx is reverse proxy${NC}"
		echo " ${LightGreen}-rpaf${NC}		   ${LightBlue}Installing Installing Rpaf module${NC}"
		echo " ${LightGreen}-drpaf${NC}		   ${LightBlue}Installing Disable Rpaf module${NC}"
		echo " ${LightGreen}-logr${NC}	           ${LightBlue}If you have nginx and want to rotate logs${NC}"
                echo ""
}


#####################
##		   ##
# The Main Function #
##		   ##
#####################

if [ $# != "0" ]
  then (

        if [ ! -e /usr/local/cpanel ] && [ ! -e /etc/init.d/mysqld ]
        then
		do_mysql
        fi 
  
	   if [ $1 == "-fpm" ]
	   then
		fpm="1"
	       	if [ $# == "2" ]
	       	then
		  if [ $2 == "-c" ]
		  then 
			do_Config
		        do_CheckServices
	          elif [ $2 == "-nc" ]
		  then
			do_AddNew_Config
			do_CheckServices
		  else
			do_Help
 		  fi
		
		  elif [ $# == "1" ]
		  then
			do_Nginx
			do_phpfpm 
			do_Config
  			if [ -e /usr/local/cpanel ]
			then
			do_AddHooks
			fi 
			do_CheckServices
		  
 	  	fi
    	  elif [ $1 == "-r" ]
	  then
	       fpm="0"
	       if [ $# == "2" ]
	       then
		 if [ $2 == "-c" ]
	         then 
			do_Rpaf
			do_Config
		        do_CheckServices
		 elif [ $2 == "-nc" ]
		 then 
			do_AddNew_Config
			do_CheckServices
		 else
			do_Help
 		 fi
	       elif [ $# == "1" ]
	       then
			do_Nginx
			do_Rpaf
			do_Config
		        if [ -e /usr/local/cpanel ]
			then
			do_AddHooks
			fi 
			do_CheckServices
	  
 	       fi

	  elif [ $1 == "-drpaf" ]
	  then
		do_DisableRPAF 
	  elif [ $1 == "-rpaf" ]
	  then
		do_Rpaf
		do_EnableRPAF
		if [ -e /usr/local/nginx ]
		then
		fpm="0"
		do_CheckServices
		fi
	  elif [ $1 == "-logr" ]
	  then
		do_LogRotate
	  elif [ $1 == "-rc" ]
	  then
		do_RemoveVH
	  elif [ $1 == "-rr" ]
	  then
	       if [ $# == "2" ]
	       then
	         REMOTEIP=$2
		 fpm="0"
	         if [ ! -e /usr/local/nginx ]
		 then
		    do_Nginx
		 fi
		    do_RemoteConfig
		    do_CheckServices
	       else
		  echo "${Red}Error, you didn't enter the IP for the remote server${NC}"
		  echo ""
		  echo ""
		  do_Help
	       fi
      	  else 
 		do_Help
          fi 
     
       )
else 
	do_Help
fi





